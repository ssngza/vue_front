{"remainingRequest":"C:\\Users\\tmdgu\\vue_front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\tmdgu\\vue_front\\src\\components\\logistic\\sales\\gridComponent\\CommonGrid.vue?vue&type=style&index=1&lang=scss&","dependencies":[{"path":"C:\\Users\\tmdgu\\vue_front\\src\\components\\logistic\\sales\\gridComponent\\CommonGrid.vue","mtime":1683620028702},{"path":"C:\\Users\\tmdgu\\vue_front\\node_modules\\css-loader\\dist\\cjs.js","mtime":1682425630341},{"path":"C:\\Users\\tmdgu\\vue_front\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1682425630991},{"path":"C:\\Users\\tmdgu\\vue_front\\node_modules\\postcss-loader\\src\\index.js","mtime":1682425630891},{"path":"C:\\Users\\tmdgu\\vue_front\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1682425647185},{"path":"C:\\Users\\tmdgu\\vue_front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1682425602778},{"path":"C:\\Users\\tmdgu\\vue_front\\node_modules\\vue-loader\\lib\\index.js","mtime":1682425630991}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAaW1wb3J0ICcvc3JjL0Bjb3JlL3Njc3MvdnVlL2xpYnMvdnVlLXNlbGVjdCc7CkBpbXBvcnQgJy4uLy4uLy4uLy4uL2Fzc2V0cy9zY3NzL21vZGFsJzsKQGltcG9ydCAnLi4vLi4vLi4vLi4vYXNzZXRzL3Njc3Mvc2Nyb2xsU3R5bGUnOwo="},{"version":3,"sources":["CommonGrid.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmUA;AACA;AACA","file":"CommonGrid.vue","sourceRoot":"src/components/logistic/sales/gridComponent","sourcesContent":["<template>\r\n\r\n  <!-- Table Container Card -->\r\n  <b-card\r\n    no-body\r\n    style=\"font-family: '배달의민족 도현'; max-height: 500px\"\r\n    class=\"scrollStyle\"\r\n  >\r\n\r\n    <div class=\"m-2\">\r\n\r\n      <b-row>\r\n        <!-- Table Top -->\r\n        <b-col\r\n          cols=\"12\"\r\n          md=\"6\"\r\n          class=\"d-flex align-items-center justify-content-start mb-1 mb-md-0\"\r\n          style=\"min-width: 1200px;\"\r\n        >\r\n          <h2 v-html=\"title\" />\r\n          <template v-if=\"datepicker\">\r\n            <b-input-group\r\n              class=\"mb-md-1\"\r\n              style=\"width: 170px; margin: 0 10px 0 10px;\"\r\n            >\r\n              <b-form-input\r\n                v-model=\"startDate\"\r\n                type=\"text\"\r\n                placeholder=\"YYYY-MM-DD\"\r\n                autocomplete=\"off\"\r\n                show-decade-nav\r\n              />\r\n              <b-input-group-append style=\"height: 37px;\">\r\n                <b-form-datepicker\r\n                  v-model=\"startDate\"\r\n                  show-decade-nav\r\n                  button-only\r\n                  button-variant=\"outline-primary\"\r\n                  right\r\n                  size=\"sm\"\r\n                  locale=\"en-US\"\r\n                  aria-controls=\"example-input\"\r\n                />\r\n              </b-input-group-append>\r\n            </b-input-group>\r\n\r\n            <h2 style=\"color:#7367f0\">\r\n              ~\r\n            </h2>\r\n\r\n            <b-input-group\r\n              class=\"mb-md-1\"\r\n              style=\"width: 170px; margin: 0 10px 0 10px;\"\r\n            >\r\n              <b-form-input\r\n                v-model=\"endDate\"\r\n                type=\"text\"\r\n                placeholder=\"YYYY-MM-DD\"\r\n                autocomplete=\"off\"\r\n                show-decade-nav\r\n              />\r\n              <b-input-group-append style=\"height: 37px;\">\r\n                <b-form-datepicker\r\n                  v-model=\"endDate\"\r\n                  show-decade-nav\r\n                  button-only\r\n                  button-variant=\"outline-primary\"\r\n                  right\r\n                  size=\"sm\"\r\n                  locale=\"en-US\"\r\n                  aria-controls=\"example-input\"\r\n                />\r\n              </b-input-group-append>\r\n            </b-input-group>\r\n            <b-button\r\n              variant=\"primary\"\r\n              size=\"md\"\r\n              class=\"mb-md-1\"\r\n              @click=\"sendDate\"\r\n            >\r\n              검색\r\n            </b-button>\r\n\r\n          </template>\r\n          <template v-if=\"searchCustomer\">\r\n            <SearchCustomerCode\r\n              @get-customer=\"getCustomer\"\r\n            />\r\n          </template>\r\n        </b-col>\r\n      </b-row>\r\n      <b-row>\r\n        <!-- Table Top -->\r\n        <b-col\r\n          cols=\"12\"\r\n          md=\"10\"\r\n          class=\"d-flex align-items-center justify-content-start mb-1 mb-md-0\"\r\n        >\r\n          <template v-for=\"button in buttonlist\">\r\n            <b-button\r\n              variant=\"primary\"\r\n              size=\"md\"\r\n              class=\"mr-1\"\r\n              @click=\"button.clickEvent\"\r\n            >\r\n              {{ button.value }}\r\n            </b-button>\r\n          </template>\r\n        </b-col>\r\n      </b-row>\r\n    </div>\r\n\r\n    <b-row />\r\n    <div\r\n      style=\"overflow-y: auto; overflow-x: auto; max-height: 210px;\"\r\n      class=\"scrollStyle\"\r\n    >\r\n      <b-table\r\n        ref=\"table\"\r\n        :items=\"gridData\"\r\n        :fields=\"tableColumnsData\"\r\n        style=\"overflow: auto; width: 100%\"\r\n        show-empty\r\n        empty-text=\"No matching records found\"\r\n        selectable\r\n        :select-mode=\"selectMode\"\r\n        @row-selected=\"onRowSelected\"\r\n      />\r\n    </div>\r\n    <div class=\"mx-2 mb-2\">\r\n      <b-row />\r\n    </div>\r\n    <transition\r\n      name=\"fade\"\r\n      mode=\"out-in\"\r\n    >\r\n      <TableEditModal\r\n        v-if=\"tableEditModal\"\r\n        :table-row-data=\"tableColumnsData\"\r\n        @close=\"closeEditModal\"\r\n        @input-modal=\"inputModal\"\r\n      />\r\n    </transition>\r\n  </b-card>\r\n</template>\r\n<script>\r\nimport {\r\n  BCard, BRow, BCol, BFormInput, BButton, BTable, BMedia, BAvatar, BLink,\r\n  BBadge, BDropdown, BDropdownItem, BPagination, BTooltip,\r\n  BTableLite, BFormDatepicker, BInputGroup, BInputGroupAppend,\r\n} from 'bootstrap-vue'\r\nimport BCardCode from '@core/components/b-card-code/BCardCode.vue'\r\nimport { mapActions, mapState } from 'vuex'\r\nimport vSelect from 'vue-select'\r\nimport SearchCustomerCode from '@/components/logistic/sales/SearchCustomerComponent'\r\nimport TableEditModal from '@/components/common/modal/TableEditModal'\r\n\r\nexport default {\r\n  components: {\r\n    TableEditModal,\r\n    BCardCode,\r\n    BTableLite,\r\n    vSelect,\r\n    BCard,\r\n    BRow,\r\n    BCol,\r\n    BFormInput,\r\n    BButton,\r\n    BTable,\r\n    BMedia,\r\n    BAvatar,\r\n    BLink,\r\n    BBadge,\r\n    BDropdown,\r\n    BDropdownItem,\r\n    BPagination,\r\n    BTooltip,\r\n    BFormDatepicker,\r\n    BInputGroup,\r\n    BInputGroupAppend,\r\n\r\n    SearchCustomerCode,\r\n  },\r\n  props: ['title', 'buttonlist', 'datepicker', 'searchCustomer', 'gridType', 'columnWidth', 'onlyOne'],\r\n  computed: {\r\n    // ...mapActions('logi/sales', ['searchContract']), 메소드에 선언해야함\r\n    ...mapState({\r\n      detailGrid: state => state.detailGrid,\r\n      detailTableColumns: state => state.detailTableColumns,\r\n      grid: state => state.grid,\r\n      tableColumns: state => state.tableColumns,\r\n    }),\r\n  },\r\n  data() {\r\n    return {\r\n      gridData: [],\r\n      tableColumnsData: [],\r\n      startDate: '',\r\n      endDate: '',\r\n      searchCompanyCodeOption: '',\r\n      searchMethod: '',\r\n      registMethod: '',\r\n      selectMode: 'single',\r\n      selectOption: [\r\n        'single', 'multiple',\r\n      ],\r\n      componentState: '',\r\n      tableEditModal: false,\r\n    }\r\n  },\r\n  watch: {\r\n    grid() {\r\n      if (this.gridType === 'grid') {\r\n        this.gridData = this.grid\r\n      }\r\n    },\r\n    detailGrid() {\r\n      if (this.gridType === 'detailGrid') {\r\n        this.gridData = this.detailGrid\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    if (this.buttonlist !== undefined) {\r\n      this.buttonlist.map(e => {\r\n        if (e.event === 'add') {\r\n          e.clickEvent = this.addButton\r\n        } else if (e.event === 'edit') {\r\n          e.clickEvent = this.editButton\r\n        } else if (e.event === 'search') {\r\n          e.clickEvent = this.searchButton\r\n        } else if (e.event === 'regist') {\r\n          e.clickEvent = this.registButton\r\n        }\r\n      })\r\n    }\r\n    if (this.gridType === 'detailGrid') {\r\n      this.gridData = this.detailGrid\r\n      this.tableColumnsData = this.detailTableColumns\r\n      this.componentState = 'detailGrid'\r\n    } else {\r\n      this.gridData = this.grid\r\n      this.tableColumnsData = this.tableColumns\r\n      this.componentState = 'grid'\r\n    }\r\n    const date = new Date()\r\n    const year = date.getFullYear()\r\n    const month = date.getMonth() + 1\r\n    const lastday = new Date(year, month, 0).getDate()\r\n    this.startDate = `${year}-${month}-01`\r\n    this.endDate = `${year}-${month}-${lastday}`\r\n  },\r\n  mounted() {\r\n    /*    if (this.columnWidth === undefined) {\r\n      this.$refs.table.style.width = this.columnWidth\r\n    } */\r\n  },\r\n  methods: {\r\n    sendDate() {\r\n      this.$emit('get-date', this.startDate, this.endDate)\r\n    },\r\n    getCustomer(customerCode, customerName) {\r\n      this.$emit('get-customer', customerCode, customerName)\r\n    },\r\n    addButton() {\r\n      this.tableEditModal = true\r\n    },\r\n    editButton() {\r\n      console.log('미완성')\r\n    },\r\n    searchButton() {\r\n      this.$emit('find-data')\r\n      // this.$store.dispatch(this.method)\r\n    },\r\n    registButton() {\r\n      console.log('가입버튼')\r\n      this.$emit('regist-data')\r\n    },\r\n    onRowSelected(val) {\r\n      this.$emit('row-selected', val)\r\n    },\r\n    closeEditModal() {\r\n      this.tableEditModal = false\r\n    },\r\n    inputModal(rowData) {\r\n      const row = {}\r\n      row.rowData = rowData\r\n      row.gridType = this.gridType\r\n      if (this.onlyOne === 'true') {\r\n        this.$store.commit('ADD_ROW_ONLY_ONE', row)\r\n      } else {\r\n        this.$store.commit('ADD_ROW', row)\r\n      }\r\n\r\n      this.$emit('input-modal', rowData)\r\n      this.tableEditModal = false\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n    <style\r\n      lang=\"scss\"\r\n      scoped\r\n    >\r\n      .per-page-selector {\r\n      width: 90px;\r\n      }\r\n\r\n      .invoice-filter-select {\r\n      min-width: 190px;\r\n\r\n      ::v-deep .vs__selected-options {\r\n      flex-wrap: nowrap;\r\n      }\r\n\r\n      ::v-deep .vs__selected {\r\n      width: 100px;\r\n      }\r\n      }\r\n    </style>\r\n\r\n    <style lang=\"scss\">\r\n      @import '/src/@core/scss/vue/libs/vue-select';\r\n      @import '../../../../assets/scss/modal';\r\n      @import '../../../../assets/scss/scrollStyle';\r\n    </style>\r\n"]}]}