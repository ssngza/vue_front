{"remainingRequest":"C:\\Users\\tmdgu\\vue_front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\tmdgu\\vue_front\\src\\components\\account\\base\\accountGridComponent\\CustomerGrid.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"C:\\Users\\tmdgu\\vue_front\\src\\components\\account\\base\\accountGridComponent\\CustomerGrid.vue","mtime":1683620028574},{"path":"C:\\Users\\tmdgu\\vue_front\\node_modules\\css-loader\\dist\\cjs.js","mtime":1682425630341},{"path":"C:\\Users\\tmdgu\\vue_front\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1682425630991},{"path":"C:\\Users\\tmdgu\\vue_front\\node_modules\\postcss-loader\\src\\index.js","mtime":1682425630891},{"path":"C:\\Users\\tmdgu\\vue_front\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1682425647185},{"path":"C:\\Users\\tmdgu\\vue_front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1682425602778},{"path":"C:\\Users\\tmdgu\\vue_front\\node_modules\\vue-loader\\lib\\index.js","mtime":1682425630991}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCkBpbXBvcnQgJy9zcmMvQGNvcmUvc2Nzcy92dWUvbGlicy92dWUtc2VsZWN0JzsNCkBpbXBvcnQgJy4uLy4uLy4uLy4uL2Fzc2V0cy9zY3NzL21vZGFsJzsNCkBpbXBvcnQgJy4uLy4uLy4uLy4uL2Fzc2V0cy9zY3NzL3Njcm9sbFN0eWxlJzsNCg=="},{"version":3,"sources":["CustomerGrid.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsPA;AACA;AACA","file":"CustomerGrid.vue","sourceRoot":"src/components/account/base/accountGridComponent","sourcesContent":["<template>\r\n  <b-card\r\n      no-body\r\n      style=\"font-family: '배달의민족 도현'; max-height: 1000px\"\r\n      class=\"scrollStyle\"\r\n  >\r\n\r\n    <div class=\"m-2\">\r\n      <b-row>\r\n        <!-- Table Top -->\r\n        <b-col\r\n            cols=\"12\"\r\n            md=\"10\"\r\n            class=\"d-flex align-items-center justify-content-start mb-1 mb-md-0\"\r\n        >\r\n          <template v-for=\"button in buttonlist\">\r\n            <b-button\r\n                variant=\"primary\"\r\n                size=\"md\"\r\n                class=\"mr-1\"\r\n                @click=\"button.clickEvent\"\r\n            >\r\n              {{ button.value }}\r\n            </b-button>\r\n          </template>\r\n        </b-col>\r\n      </b-row>\r\n    </div>\r\n\r\n    <b-row />\r\n    <div\r\n        style=\"overflow-y: auto; overflow-x: auto; max-height: 410px;\"\r\n        class=\"scrollStyle\"\r\n    >\r\n      <b-table\r\n          ref=\"table\"\r\n          :items=\"customerList\"\r\n          :fields=\"tableColumnsData\"\r\n          style=\"overflow: auto; width: 100%; \"\r\n          show-empty\r\n          empty-text=\"No matching records found\"\r\n          selectable\r\n          :select-mode=\"selectMode\"\r\n          :sticky-header=\"true\"\r\n          @row-selected=\"onRowSelected\"\r\n          @row-clicked=\"itemCodeClick\"\r\n      />\r\n    </div>\r\n    <div class=\"mx-2 mb-2\">\r\n      <b-row />\r\n    </div>\r\n    <transition\r\n        name=\"fade\"\r\n        mode=\"out-in\"\r\n    >\r\n      <TableEditModal\r\n          v-if=\"tableEditModal\"\r\n          :table-row-data=\"tableColumnsData\"\r\n          @close=\"closeEditModal\"\r\n          @input-modal=\"inputModal\"\r\n          @ok=\"inputDataModal\"\r\n      />\r\n    </transition>\r\n  </b-card>\r\n</template>\r\n\r\n<script>\r\nimport TableEditModal from '@/components/common/modal/TableEditModal.vue'\r\nimport BCardCode from '@core/components/b-card-code/BCardCode.vue'\r\nimport {\r\n  BAvatar,\r\n  BBadge,\r\n  BButton,\r\n  BCard,\r\n  BCol, BDropdown, BDropdownItem, BFormDatepicker,\r\n  BFormInput, BInputGroup, BInputGroupAppend,\r\n  BLink,\r\n  BMedia, BPagination,\r\n  BRow,\r\n  BTable,\r\n  BTableLite, BTooltip\r\n} from 'bootstrap-vue'\r\nimport vSelect from 'vue-select'\r\nimport SearchCustomerCode from '@/components/logistic/sales/SearchCustomerComponent.vue'\r\nimport {mapMutations, mapState} from 'vuex'\r\n\r\nexport default {\r\n  components: {\r\n    TableEditModal,\r\n    BCardCode,\r\n    BTableLite,\r\n    vSelect,\r\n    BCard,\r\n    BRow,\r\n    BCol,\r\n    BFormInput,\r\n    BButton,\r\n    BTable,\r\n    BMedia,\r\n    BAvatar,\r\n    BLink,\r\n    BBadge,\r\n    BDropdown,\r\n    BDropdownItem,\r\n    BPagination,\r\n    BTooltip,\r\n    BFormDatepicker,\r\n    BInputGroup,\r\n    BInputGroupAppend,\r\n\r\n    SearchCustomerCode,\r\n  },\r\n  props: ['title', 'buttonlist', 'datepicker', 'searchCustomer', 'gridType', 'columnWidth', 'onlyOne'],\r\n  computed: {\r\n    // ...mapActions('logi/sales', ['searchContract']), 메소드에 선언해야함\r\n    ...mapState({\r\n      grid: state => state.grid,\r\n      tableColumns: state => state.tableColumns,\r\n      customerList: state => state.account.base.customerList\r\n      /*       customerList: state => state['account/base/customerList'] */\r\n    }),\r\n  },\r\n  data() {\r\n    return {\r\n      workplaceCode:'',\r\n      customerName:'',\r\n      customerCeo:'',\r\n      businessLicenseNumber:'',\r\n      customerBusinessConditions:'',\r\n      customerBusinessItems:'',\r\n      customerBasicAddress:'',\r\n      gridData: [],\r\n      tableColumnsData: [],\r\n      startDate: '',\r\n      endDate: '',\r\n      searchMethod: '',\r\n      registMethod: '',\r\n      selectMode: 'single',\r\n      customerCode:'',\r\n      selectOption: [\r\n        'single', 'multiple',\r\n      ],\r\n      componentState: '',\r\n      tableEditModal: false,\r\n    }\r\n  },\r\n  watch: {\r\n    grid() {\r\n      if (this.gridType === 'grid') {\r\n        this.gridData = this.grid\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    if (this.buttonlist !== undefined) {\r\n      this.buttonlist.map(e => {\r\n        if (e.event === 'add') {\r\n          e.clickEvent = this.addButton\r\n        } else if (e.event === 'search') {\r\n          e.clickEvent = this.searchButton\r\n        } else if (e.event === 'delete') {\r\n          e.clickEvent = this.deleteButton\r\n        } else if (e.event === 'save') {\r\n          e.clickEvent = this.saveButton\r\n        }\r\n      })\r\n    }\r\n    if (this.gridType === 'grid') {\r\n      this.gridData = this.grid\r\n      this.tableColumnsData = this.tableColumns\r\n      this.componentState = 'grid'\r\n    }\r\n  },\r\n  mounted() {\r\n    /*    if (this.columnWidth === undefined) {\r\n      this.$refs.table.style.width = this.columnWidth\r\n    } */\r\n  },\r\n  methods: {\r\n    ...mapMutations('account/base', ['ADD_CUSTOMER_CODE']),\r\n    addButton() {\r\n      console.log('추가버튼')\r\n      this.tableEditModal = true\r\n    },\r\n    saveButton() {\r\n      console.log('저장버튼')\r\n      this.$emit('regist-data')\r\n    },\r\n    searchButton() {\r\n      console.log('조회버튼')\r\n      this.$emit('find-data')\r\n      // this.$store.dispatch(this.method)\r\n    },\r\n    deleteButton(item) {\r\n      console.log('삭제버튼')\r\n      console.log('그리드에서item:',item)\r\n      console.log('넘길거: ', this.customerCode)\r\n      let customerCode=this.customerCode\r\n      if(!customerCode){\r\n        alert(\"행을 누르세용~~~\")\r\n        return\r\n      }\r\n      this.$emit('delete-data',customerCode)\r\n    },\r\n    onRowSelected(val) {\r\n      this.$emit('row-selected', val)\r\n    },\r\n    closeEditModal() {\r\n      this.tableEditModal = false\r\n    },\r\n    inputModal(rowData) {\r\n      const row = {}\r\n      row.rowData = rowData\r\n      console.log(\"모달 rowData:::\",row.rowData)\r\n      row.gridType = this.gridType\r\n      console.log(\"모달 gridType:::\",row.gridType)\r\n/*\r\n      if (this.onlyOne === 'true') {\r\n        this.$store.commit('ADD_ROW_ONLY_ONE', row)\r\n      } else {\r\n        this.$store.commit('ADD_ROW', row)\r\n      }\r\n*/\r\n\r\n      this.$emit('input-modal', rowData)\r\n      console.log('마지막emit::',rowData)\r\n      console.log('거래처리스트',this.customerList)\r\n      this.tableEditModal = false\r\n      this.ADD_CUSTOMER_CODE(rowData)\r\n    },\r\n    inputDataModal(){\r\n\r\n    },\r\n    itemCodeClick(item) {\r\n      console.log(\"itemCodeClick 실행\")\r\n      console.log(\"itemList::::\",item)\r\n      console.log(\"item\",item.customerCode)\r\n      this.customerCode=item.customerCode\r\n      /*       const newObject = item.detailCode\r\n\r\n            this.itemCodeInput = newObject */\r\n    }\r\n  },\r\n}\r\n</script>\r\n<style lang=\"scss\">\r\n@import '/src/@core/scss/vue/libs/vue-select';\r\n@import '../../../../assets/scss/modal';\r\n@import '../../../../assets/scss/scrollStyle';\r\n</style>\r\n"]}]}