{"remainingRequest":"C:\\Users\\tmdgu\\vue_front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\tmdgu\\vue_front\\src\\views\\logistic\\sales\\Estimate\\EstimateRegisteUpgrade.vue?vue&type=style&index=1&lang=scss&","dependencies":[{"path":"C:\\Users\\tmdgu\\vue_front\\src\\views\\logistic\\sales\\Estimate\\EstimateRegisteUpgrade.vue","mtime":1683620245335},{"path":"C:\\Users\\tmdgu\\vue_front\\node_modules\\css-loader\\dist\\cjs.js","mtime":1682425630341},{"path":"C:\\Users\\tmdgu\\vue_front\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1682425630991},{"path":"C:\\Users\\tmdgu\\vue_front\\node_modules\\postcss-loader\\src\\index.js","mtime":1682425630891},{"path":"C:\\Users\\tmdgu\\vue_front\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1682425647185},{"path":"C:\\Users\\tmdgu\\vue_front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1682425602778},{"path":"C:\\Users\\tmdgu\\vue_front\\node_modules\\vue-loader\\lib\\index.js","mtime":1682425630991}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAnc3JjL2Fzc2V0cy9zY3NzL3Njcm9sbFN0eWxlJzsKYm9keXsKICBmb250LWZhbWlseTogIuuwsOuLrOydmOuvvOyhsSDrj4TtmIQiOwp9Cg=="},{"version":3,"sources":["EstimateRegisteUpgrade.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2TA;AACA;AACA;AACA","file":"EstimateRegisteUpgrade.vue","sourceRoot":"src/views/logistic/sales/Estimate","sourcesContent":["<template>\r\n  <!--  <div>\r\n    <WorkInstructionGrid>\r\n      <template v-slot:header>\r\n        <h2\r\n          class=\"mb-md-1\"\r\n          style=\"width: 100px\"\r\n        >\r\n          작업지시\r\n        </h2>\r\n      </template>\r\n    </WorkInstructionGrid>\r\n    <WorkInstructionDetailGrid>SET_TABLE\r\n      <template v-slot:header>\r\n        <h2>\r\n          작업지시현황\r\n        </h2>\r\n      </template>\r\n    </WorkInstructionDetailGrid>\r\n  </div>-->\r\n  <!--  <CommonGrid\r\n          grid-type=\"grid\"\r\n          :buttonlist=\"buttonList\"\r\n          title=\"작업지시\"\r\n          :datepicker=\"true\"\r\n          :search-customer=\"true\"\r\n          @get-date=\"getDate\"\r\n          @get-customer=\"getCustomer\"\r\n          @get-grid-data=\"getGridData\"\r\n  />-->\r\n  <div>\r\n    <CommonGrid\r\n      grid-type=\"grid\"\r\n      :buttonlist=\"buttonList\"\r\n      title=\"견적등록\"\r\n      column-width=\"1700px\"\r\n      only-one=\"true\"\r\n      @row-selected=\"showGridData\"\r\n      @find-data=\"getGridData\"\r\n      @input-modal=\"gridInputModal\"\r\n      @regist-data=\"registData\"\r\n    />\r\n    <CommonGrid\r\n      grid-type=\"detailGrid\"\r\n      title=\"견적상세\"\r\n      :buttonlist=\"detailGridbuttonList\"\r\n      @input-modal=\"detailGridInputModal\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  BCard, BRow, BCol, BFormInput, BButton, BTable, BMedia, BAvatar, BLink, BFormRadioGroup, BCardText,\r\n  BBadge, BDropdown, BDropdownItem, BPagination, BTooltip, BFormDatepicker, BInputGroup, BInputGroupAppend,\r\n  BFormGroup,\r\n} from 'bootstrap-vue'\r\nimport BEditableTable from 'bootstrap-vue-editable-table'\r\nimport WorkInstructionGrid from '@/components/logistic/production/workInstruction/WorkInstructionGrid'\r\nimport WorkInstructionDetailGrid from '@/components/logistic/production/workInstruction/WorkInstructionDetailGrid'\r\nimport CommonGrid from '@/components/logistic/sales/gridComponent/CommonGrid'\r\nimport { mapActions, mapState } from 'vuex'\r\n\r\nexport default {\r\n  components: {\r\n    BCard,\r\n    BRow,\r\n    BCol,\r\n    BFormInput,\r\n    BButton,\r\n    BTable,\r\n    BMedia,\r\n    BAvatar,\r\n    BLink,\r\n    BBadge,\r\n    BDropdown,\r\n    BDropdownItem,\r\n    BPagination,\r\n    BTooltip,\r\n    BFormDatepicker,\r\n    BInputGroup,\r\n    BInputGroupAppend,\r\n    BEditableTable,\r\n    BFormRadioGroup,\r\n    BCardText,\r\n    BFormGroup,\r\n\r\n    WorkInstructionGrid,\r\n    WorkInstructionDetailGrid,\r\n    CommonGrid,\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      grid: state => state.grid,\r\n      detailGrid: state => state.detailGrid,\r\n      customerCodeList: state => state.hr.company.companyCodeList,\r\n      itemList: state => state.logi.base.itemList,\r\n    }),\r\n  },\r\n  data: () => ({\r\n    startDate: '0000-00-0',\r\n    endDate: '0000-00-0',\r\n    selected: '',\r\n    workplaceName: '',\r\n    workplaceCode: '',\r\n    searchWorkplace: '',\r\n    companyCode: 'BRC-01',\r\n    searchCompanyCodeOption: '',\r\n    options: [],\r\n    buttonList: [\r\n      {\r\n        value: '추가',\r\n        event: 'add',\r\n      },\r\n      {\r\n        value: '등록',\r\n        event: 'regist',\r\n      },\r\n    ],\r\n    itemOptions: [],\r\n    detailGridbuttonList: [\r\n      {\r\n        value: '추가',\r\n        event: 'add',\r\n      },\r\n    ],\r\n    itemNameValue: '',\r\n  }),\r\n\r\n  watch: {\r\n    searchCompanyCodeOption(newValue) {\r\n      if (newValue !== '') {\r\n        const searchOption = { searchCondition: newValue, workplaceCode: this.companyCode }\r\n        this.$store.dispatch('hr/company/searchCustomerList', searchOption)\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    this.$store.commit('RESET_GRID')\r\n    const searchOption = { searchCondition: 'ALL', workplaceCode: 'BRC-01' }\r\n    this.$store.dispatch('hr/company/searchCustomerList', searchOption)\r\n    this.$store.dispatch('logi/base/SEARCH_ITEM', 'IT-_I')\r\n    let dataList = []\r\n    this.customerCodeList.map(e => {\r\n      const { customerName } = e\r\n      dataList.push({ text: customerName, value: customerName })\r\n    })\r\n    console.log(this.customerCodeList)\r\n    console.log(dataList)\r\n    this.options = dataList\r\n\r\n    dataList = []\r\n\r\n    this.itemList.map(e => {\r\n      const { detailCodeName, detailCode } = e\r\n      dataList.push({ text: detailCode, value: detailCodeName })\r\n    })\r\n\r\n    this.itemOptions = dataList\r\n\r\n    const date = new Date()\r\n    const year = date.getFullYear()\r\n    const month = String(date.getMonth() + 1).padStart(2, '0')\r\n    const day = String(date.getDate()).padStart(2, '0')\r\n    const today = `${year}-${month}-${day}`\r\n    const lastday = new Date(year, month, 0).getDate()\r\n    this.startDate = `${year}-${month}-01`\r\n    this.endDate = `${year}-${month}-${lastday}`\r\n\r\n    const tableColumns = [{\r\n      tableColumns: [\r\n        {\r\n          key: 'customerCode',\r\n          label: '거래처명',\r\n          sortable: true,\r\n          dataType: 'select',\r\n          options: this.options,\r\n        },\r\n        {\r\n          key: 'estimateDate', label: '견적일자', sortable: true, dataType: 'date', value: today, disabled: true,\r\n        },\r\n        {\r\n          key: 'effectiveDate', label: '유효일자', sortable: true, dataType: 'date', value: this.endDate,\r\n        },\r\n        {\r\n          key: 'personCodeInCharge', label: '견적담당자', sortable: true, value: 'GDW', disabled: true,\r\n        },\r\n        {\r\n          key: 'estimateRequester', label: '견적요청자', sortable: true, value: 'GDW', disabled: true,\r\n        },\r\n        { key: 'description', label: '비고', sortable: true },\r\n      ],\r\n      detailTableColumns: [\r\n        {\r\n          key: 'itemCode',\r\n          label: '품목코드',\r\n          sortable: true,\r\n          dataType: 'selectToInput',\r\n          options: this.itemOptions,\r\n          value: 'item',\r\n          To: {\r\n            toKey: 'itemName', label: '품목명',\r\n          },\r\n        },\r\n        {\r\n          key: 'itemName', label: '품목명', sortable: true, hide: true,\r\n        },\r\n        {\r\n          key: 'unitOfEstimate', label: '단위', sortable: true, value: 'EA',\r\n        },\r\n        {\r\n          key: 'dueDateOfEstimate', label: '납기일', sortable: true, dataType: 'date', value: this.endDate,\r\n        },\r\n        { key: 'estimateAmount', label: '견적수량', sortable: true },\r\n        {\r\n          key: 'unitPriceOfEstimate', label: '견적단가', sortable: true, hide: true,\r\n        },\r\n        {\r\n          key: 'sumPriceOfEstimate', label: '합계액', sortable: true, hide: true,\r\n        },\r\n        { key: 'description', label: '비고', sortable: true },\r\n      ],\r\n    },\r\n    ]\r\n\r\n    this.$store.commit('SET_TABLE', tableColumns)\r\n\r\n    // this.searchContract('searchByDate')\r\n  },\r\n  methods: {\r\n    showMe() {\r\n      console.log(this.customerCode)\r\n    },\r\n    getDate(startDate, endDate) {\r\n      const sendDate = { startDate, endDate }\r\n      this.$store.dispatch('logi/sales/searchEstimateInContractAvailable', sendDate)\r\n    },\r\n    getCustomer(customerCode, customerName) {\r\n      console.log(customerCode)\r\n      console.log(customerName)\r\n    },\r\n\r\n\r\n\r\n    getGridData() {\r\n      console.log('getGridData')\r\n      this.$store.dispatch('logi/workInstruction/SHOW_WORK_INFO_LIST')\r\n    },\r\n\r\n\r\n\r\n    showGridData(val) {\r\n      console.log(val)\r\n    },\r\n\r\n\r\n\r\n    gridInputModal() {\r\n    },\r\n\r\n\r\n\r\n    async detailGridInputModal(rowData) {\r\n      const unitPrice = await this.$store.dispatch('logi/base/GET_STANDARD_UNIT_PRICE', rowData[0].itemCode)\r\n\r\n      const amount = parseInt(rowData[0].estimateAmount)\r\n      const calculation = amount * unitPrice\r\n\r\n      this.detailGrid[this.detailGrid.length - 1].unitPriceOfEstimate = unitPrice\r\n      this.detailGrid[this.detailGrid.length - 1].sumPriceOfEstimate = calculation\r\n    },\r\n\r\n\r\n\r\n    async registData() {\r\n      const customerInfo = this.customerCodeList.filter(e => e.customerName === this.grid[0].customerCode)\r\n      const detailGridData = this.detailGrid.map(e => {\r\n        e.status = 'INSERT'\r\n        return e\r\n      })\r\n      const newEstimate = { newEstimateInfo: { ...this.grid[0], estimateDetailTOList: detailGridData } }\r\n\r\n      newEstimate.newEstimateInfo.customerCode = customerInfo[0].customerCode\r\n      const isSuccess = await this.$store.dispatch('logi/sales/ADD_NEW_ESTIMATE', newEstimate)\r\n      if (isSuccess) {\r\n        this.$swal.fire(\r\n          '등록 성공!',\r\n          '페이지를 새로고침합니다.',\r\n          'success',\r\n        ).then(() => {\r\n          this.$store.commit('RESET_GRID')\r\n        })\r\n      } else {\r\n        this.$swal.fire({\r\n          icon: 'error',\r\n          title: '등록 실패',\r\n          text: '견적을 다시 확인해주세요.',\r\n        })\r\n      }\r\n    },\r\n\r\n\r\n\r\n  },\r\n}\r\n\r\n\r\n\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n\r\n</style>\r\n\r\n<style lang=\"scss\">\r\n  @import 'src/assets/scss/scrollStyle';\r\n  body{\r\n    font-family: \"배달의민족 도현\";\r\n  }\r\n</style>\r\n"]}]}