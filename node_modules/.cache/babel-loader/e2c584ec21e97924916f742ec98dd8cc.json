{"remainingRequest":"C:\\Users\\tmdgu\\vue_front\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\tmdgu\\vue_front\\src\\@core\\utils\\filter.js","dependencies":[{"path":"C:\\Users\\tmdgu\\vue_front\\src\\@core\\utils\\filter.js","mtime":1683620027025},{"path":"C:\\Users\\tmdgu\\vue_front\\babel.config.js","mtime":1683620026767},{"path":"C:\\Users\\tmdgu\\vue_front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1682425602778},{"path":"C:\\Users\\tmdgu\\vue_front\\node_modules\\babel-loader\\lib\\index.js","mtime":1682425602675}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnRvLWZpeGVkLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyI7CmltcG9ydCB7IGlzVG9kYXkgfSBmcm9tICcuL3V0aWxzJzsKZXhwb3J0IHZhciBrRm9ybWF0dGVyID0gZnVuY3Rpb24ga0Zvcm1hdHRlcihudW0pIHsKICByZXR1cm4gbnVtID4gOTk5ID8gIiIuY29uY2F0KChudW0gLyAxMDAwKS50b0ZpeGVkKDEpLCAiayIpIDogbnVtOwp9OwpleHBvcnQgdmFyIHRpdGxlID0gZnVuY3Rpb24gdGl0bGUodmFsdWUpIHsKICB2YXIgcmVwbGFjZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcgJzsKICBpZiAoIXZhbHVlKSByZXR1cm4gJyc7CiAgdmFyIHN0ciA9IHZhbHVlLnRvU3RyaW5nKCk7CiAgdmFyIGFyciA9IHN0ci5zcGxpdChyZXBsYWNlcik7CiAgdmFyIGNhcGl0YWxpemVkQXJyYXkgPSBbXTsKICBhcnIuZm9yRWFjaChmdW5jdGlvbiAod29yZCkgewogICAgdmFyIGNhcGl0YWxpemVkID0gd29yZC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHdvcmQuc2xpY2UoMSk7CiAgICBjYXBpdGFsaXplZEFycmF5LnB1c2goY2FwaXRhbGl6ZWQpOwogIH0pOwogIHJldHVybiBjYXBpdGFsaXplZEFycmF5LmpvaW4oJyAnKTsKfTsKZXhwb3J0IHZhciBhdmF0YXJUZXh0ID0gZnVuY3Rpb24gYXZhdGFyVGV4dCh2YWx1ZSkgewogIGlmICghdmFsdWUpIHJldHVybiAnJzsKICB2YXIgbmFtZUFycmF5ID0gdmFsdWUuc3BsaXQoJyAnKTsKICByZXR1cm4gbmFtZUFycmF5Lm1hcChmdW5jdGlvbiAod29yZCkgewogICAgcmV0dXJuIHdvcmQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCk7CiAgfSkuam9pbignJyk7Cn07Ci8qKg0KICogRm9ybWF0IGFuZCByZXR1cm4gZGF0ZSBpbiBIdW1hbml6ZSBmb3JtYXQNCiAqIEludGwgZG9jczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvSW50bC9EYXRlVGltZUZvcm1hdC9mb3JtYXQNCiAqIEludGwgQ29uc3RydWN0b3I6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0ludGwvRGF0ZVRpbWVGb3JtYXQvRGF0ZVRpbWVGb3JtYXQNCiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSBkYXRlIHRvIGZvcm1hdA0KICogQHBhcmFtIHtPYmplY3R9IGZvcm1hdHRpbmcgSW50bCBvYmplY3QgdG8gZm9ybWF0IHdpdGgNCiAqLwoKZXhwb3J0IHZhciBmb3JtYXREYXRlID0gZnVuY3Rpb24gZm9ybWF0RGF0ZSh2YWx1ZSkgewogIHZhciBmb3JtYXR0aW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7CiAgICBtb250aDogJ3Nob3J0JywKICAgIGRheTogJ251bWVyaWMnLAogICAgeWVhcjogJ251bWVyaWMnCiAgfTsKICBpZiAoIXZhbHVlKSByZXR1cm4gdmFsdWU7CiAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KCdlbi1VUycsIGZvcm1hdHRpbmcpLmZvcm1hdChuZXcgRGF0ZSh2YWx1ZSkpOwp9OwovKioNCiAqIFJldHVybiBzaG9ydCBodW1hbiBmcmllbmRseSBtb250aCByZXByZXNlbnRhdGlvbiBvZiBkYXRlDQogKiBDYW4gYWxzbyBjb252ZXJ0IGRhdGUgdG8gb25seSB0aW1lIGlmIGRhdGUgaXMgb2YgdG9kYXkgKEJldHRlciBVWCkNCiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSBkYXRlIHRvIGZvcm1hdA0KICogQHBhcmFtIHtCb29sZWFufSB0b1RpbWVGb3JDdXJyZW50RGF5IFNoYWxsIGNvbnZlcnQgdG8gdGltZSBpZiBkYXkgaXMgdG9kYXkvY3VycmVudA0KICovCgpleHBvcnQgdmFyIGZvcm1hdERhdGVUb01vbnRoU2hvcnQgPSBmdW5jdGlvbiBmb3JtYXREYXRlVG9Nb250aFNob3J0KHZhbHVlKSB7CiAgdmFyIHRvVGltZUZvckN1cnJlbnREYXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7CiAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh2YWx1ZSk7CiAgdmFyIGZvcm1hdHRpbmcgPSB7CiAgICBtb250aDogJ3Nob3J0JywKICAgIGRheTogJ251bWVyaWMnCiAgfTsKCiAgaWYgKHRvVGltZUZvckN1cnJlbnREYXkgJiYgaXNUb2RheShkYXRlKSkgewogICAgZm9ybWF0dGluZyA9IHsKICAgICAgaG91cjogJ251bWVyaWMnLAogICAgICBtaW51dGU6ICdudW1lcmljJwogICAgfTsKICB9CgogIHJldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgnZW4tVVMnLCBmb3JtYXR0aW5nKS5mb3JtYXQobmV3IERhdGUodmFsdWUpKTsKfTsgLy8gU3RyaXAgYWxsIHRoZSB0YWdzIGZyb20gbWFya3VwIGFuZCByZXR1cm4gcGxhaW4gdGV4dAoKZXhwb3J0IHZhciBmaWx0ZXJUYWdzID0gZnVuY3Rpb24gZmlsdGVyVGFncyh2YWx1ZSkgewogIHJldHVybiB2YWx1ZS5yZXBsYWNlKC88XC8/W14+XSsoPnwkKS9nLCAnJyk7Cn07"},{"version":3,"sources":["C:/Users/tmdgu/vue_front/src/@core/utils/filter.js"],"names":["isToday","kFormatter","num","toFixed","title","value","replacer","str","toString","arr","split","capitalizedArray","forEach","word","capitalized","charAt","toUpperCase","slice","push","join","avatarText","nameArray","map","formatDate","formatting","month","day","year","Intl","DateTimeFormat","format","Date","formatDateToMonthShort","toTimeForCurrentDay","date","hour","minute","filterTags","replace"],"mappings":"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","sourcesContent":["import { isToday } from './utils'\r\n\r\nexport const kFormatter = num => (num > 999 ? `${(num / 1000).toFixed(1)}k` : num)\r\n\r\nexport const title = (value, replacer = ' ') => {\r\n  if (!value) return ''\r\n  const str = value.toString()\r\n\r\n  const arr = str.split(replacer)\r\n  const capitalizedArray = []\r\n  arr.forEach(word => {\r\n    const capitalized = word.charAt(0).toUpperCase() + word.slice(1)\r\n    capitalizedArray.push(capitalized)\r\n  })\r\n  return capitalizedArray.join(' ')\r\n}\r\n\r\nexport const avatarText = value => {\r\n  if (!value) return ''\r\n  const nameArray = value.split(' ')\r\n  return nameArray.map(word => word.charAt(0).toUpperCase()).join('')\r\n}\r\n\r\n/**\r\n * Format and return date in Humanize format\r\n * Intl docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\r\n * Intl Constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\r\n * @param {String} value date to format\r\n * @param {Object} formatting Intl object to format with\r\n */\r\nexport const formatDate = (value, formatting = { month: 'short', day: 'numeric', year: 'numeric' }) => {\r\n  if (!value) return value\r\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value))\r\n}\r\n\r\n/**\r\n * Return short human friendly month representation of date\r\n * Can also convert date to only time if date is of today (Better UX)\r\n * @param {String} value date to format\r\n * @param {Boolean} toTimeForCurrentDay Shall convert to time if day is today/current\r\n */\r\nexport const formatDateToMonthShort = (value, toTimeForCurrentDay = true) => {\r\n  const date = new Date(value)\r\n  let formatting = { month: 'short', day: 'numeric' }\r\n\r\n  if (toTimeForCurrentDay && isToday(date)) {\r\n    formatting = { hour: 'numeric', minute: 'numeric' }\r\n  }\r\n\r\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value))\r\n}\r\n\r\n// Strip all the tags from markup and return plain text\r\nexport const filterTags = value => value.replace(/<\\/?[^>]+(>|$)/g, '')\r\n"]}]}